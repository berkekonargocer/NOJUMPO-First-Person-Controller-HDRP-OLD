//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/NOJUMPO/NJFirstPersonController/Input Reading/Input Action Asset/NJInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace NOJUMPO
{
    public partial class @NJInputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @NJInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""NJInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""af28845b-436d-4dc2-8588-b709a45540fa"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ecc94f84-8722-49b7-9340-4ed28ef65348"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""8ad2008f-ec7e-43c2-b6ee-db50016069b1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""InteractButton"",
                    ""type"": ""Button"",
                    ""id"": ""5cce449f-07a7-4a74-9d20-8958e12267b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""46f5cae1-c548-465b-b98e-65510adb0f1e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""99fa29b5-d82e-4c18-9297-9a8247902682"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""49bfa8eb-7c96-4591-9e8d-ae78a2d70265"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1e2d95fc-9c3e-4c9b-b607-975b52db99d7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6667dcf0-1a91-49e5-b7a4-9e18a5bde831"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""030732ed-d4f3-41da-b8a5-366151fc8013"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3243b87-8bf2-4ce5-9a47-01e68db848b5"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""2cb80920-5942-4d9e-942b-9bff8edfb05c"",
            ""actions"": [
                {
                    ""name"": ""Resume Game"",
                    ""type"": ""Button"",
                    ""id"": ""4948414e-5188-442e-a417-fe04e5e546c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""105134ca-9f1d-43a7-aca0-c164b0e4977d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Resume Game"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Inspect"",
            ""id"": ""f3a4f511-5639-49da-b9a5-0141f9508fa0"",
            ""actions"": [
                {
                    ""name"": ""InteractButton"",
                    ""type"": ""Button"",
                    ""id"": ""fa972db4-10ef-4b52-a775-2ebfdc903b70"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InspectLook"",
                    ""type"": ""Value"",
                    ""id"": ""73cc4269-35c0-47e9-9caf-7da078123112"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b9acc308-9840-4480-8301-7727d747944b"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InspectLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9dc3a7a7-55e6-4855-8b27-ce3ec7073a33"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
            m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
            m_Player_InteractButton = m_Player.FindAction("InteractButton", throwIfNotFound: true);
            // UI
            m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
            m_UI_ResumeGame = m_UI.FindAction("Resume Game", throwIfNotFound: true);
            // Inspect
            m_Inspect = asset.FindActionMap("Inspect", throwIfNotFound: true);
            m_Inspect_InteractButton = m_Inspect.FindAction("InteractButton", throwIfNotFound: true);
            m_Inspect_InspectLook = m_Inspect.FindAction("InspectLook", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
        private readonly InputAction m_Player_Move;
        private readonly InputAction m_Player_Look;
        private readonly InputAction m_Player_InteractButton;
        public struct PlayerActions
        {
            private @NJInputActions m_Wrapper;
            public PlayerActions(@NJInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Player_Move;
            public InputAction @Look => m_Wrapper.m_Player_Look;
            public InputAction @InteractButton => m_Wrapper.m_Player_InteractButton;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @InteractButton.started += instance.OnInteractButton;
                @InteractButton.performed += instance.OnInteractButton;
                @InteractButton.canceled += instance.OnInteractButton;
            }

            private void UnregisterCallbacks(IPlayerActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Look.started -= instance.OnLook;
                @Look.performed -= instance.OnLook;
                @Look.canceled -= instance.OnLook;
                @InteractButton.started -= instance.OnInteractButton;
                @InteractButton.performed -= instance.OnInteractButton;
                @InteractButton.canceled -= instance.OnInteractButton;
            }

            public void RemoveCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActions @Player => new PlayerActions(this);

        // UI
        private readonly InputActionMap m_UI;
        private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
        private readonly InputAction m_UI_ResumeGame;
        public struct UIActions
        {
            private @NJInputActions m_Wrapper;
            public UIActions(@NJInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @ResumeGame => m_Wrapper.m_UI_ResumeGame;
            public InputActionMap Get() { return m_Wrapper.m_UI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
            public void AddCallbacks(IUIActions instance)
            {
                if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
                @ResumeGame.started += instance.OnResumeGame;
                @ResumeGame.performed += instance.OnResumeGame;
                @ResumeGame.canceled += instance.OnResumeGame;
            }

            private void UnregisterCallbacks(IUIActions instance)
            {
                @ResumeGame.started -= instance.OnResumeGame;
                @ResumeGame.performed -= instance.OnResumeGame;
                @ResumeGame.canceled -= instance.OnResumeGame;
            }

            public void RemoveCallbacks(IUIActions instance)
            {
                if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IUIActions instance)
            {
                foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public UIActions @UI => new UIActions(this);

        // Inspect
        private readonly InputActionMap m_Inspect;
        private List<IInspectActions> m_InspectActionsCallbackInterfaces = new List<IInspectActions>();
        private readonly InputAction m_Inspect_InteractButton;
        private readonly InputAction m_Inspect_InspectLook;
        public struct InspectActions
        {
            private @NJInputActions m_Wrapper;
            public InspectActions(@NJInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @InteractButton => m_Wrapper.m_Inspect_InteractButton;
            public InputAction @InspectLook => m_Wrapper.m_Inspect_InspectLook;
            public InputActionMap Get() { return m_Wrapper.m_Inspect; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(InspectActions set) { return set.Get(); }
            public void AddCallbacks(IInspectActions instance)
            {
                if (instance == null || m_Wrapper.m_InspectActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_InspectActionsCallbackInterfaces.Add(instance);
                @InteractButton.started += instance.OnInteractButton;
                @InteractButton.performed += instance.OnInteractButton;
                @InteractButton.canceled += instance.OnInteractButton;
                @InspectLook.started += instance.OnInspectLook;
                @InspectLook.performed += instance.OnInspectLook;
                @InspectLook.canceled += instance.OnInspectLook;
            }

            private void UnregisterCallbacks(IInspectActions instance)
            {
                @InteractButton.started -= instance.OnInteractButton;
                @InteractButton.performed -= instance.OnInteractButton;
                @InteractButton.canceled -= instance.OnInteractButton;
                @InspectLook.started -= instance.OnInspectLook;
                @InspectLook.performed -= instance.OnInspectLook;
                @InspectLook.canceled -= instance.OnInspectLook;
            }

            public void RemoveCallbacks(IInspectActions instance)
            {
                if (m_Wrapper.m_InspectActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IInspectActions instance)
            {
                foreach (var item in m_Wrapper.m_InspectActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_InspectActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public InspectActions @Inspect => new InspectActions(this);
        private int m_KeyboardSchemeIndex = -1;
        public InputControlScheme KeyboardScheme
        {
            get
            {
                if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
                return asset.controlSchemes[m_KeyboardSchemeIndex];
            }
        }
        public interface IPlayerActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnLook(InputAction.CallbackContext context);
            void OnInteractButton(InputAction.CallbackContext context);
        }
        public interface IUIActions
        {
            void OnResumeGame(InputAction.CallbackContext context);
        }
        public interface IInspectActions
        {
            void OnInteractButton(InputAction.CallbackContext context);
            void OnInspectLook(InputAction.CallbackContext context);
        }
    }
}
